using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace _9September
{
    internal class Class3
    {
        static void Main(string[] args)
        {
            using (Mutex mutex = new Mutex(false, "Threading"))
            {

                if (!mutex.WaitOne(5000, false))
                {
                    Console.WriteLine("already running....");
                    Console.ReadLine();
                    return;

                }
                else
                {
                    Console.WriteLine("app is running");
                    Console.ReadLine();
                }

            }

        }
    }

}
=====================================================================

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace _9September
{
    internal class Class4
    {
        static object l1 = new object();
        static void PrintTable()
        {

            Thread.Sleep(300);
            WriteToFile();

        }

        static void WriteToFile()
        {
            string threadname = Thread.CurrentThread.Name;
            Console.WriteLine(threadname);
            Monitor.Enter(l1);

            try
            {

                using (FileStream fs = new FileStream("tables.txt", FileMode.Append, FileAccess.Write))
                {
                    StreamWriter wr = new StreamWriter(fs);
                    wr.WriteLine(threadname);
                    wr.Close();
                    fs.Close();
                }




            }
            catch (Exception ex)
            {

                Console.WriteLine(ex.Message);
            }
            finally
            {


                Monitor.Exit(l1);
                Console.WriteLine("Releasing the thread " + threadname);

            }




        }
        static void Main(string[] args)
        {

            for (int i = 0; i < 3; i++)
            {
                Thread thread = new Thread(PrintTable);
                thread.Name = string.Concat("thread ", i);
                thread.Start();

            }
            Console.Read();

        }
    }
}
